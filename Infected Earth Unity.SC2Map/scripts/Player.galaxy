void Player_SetHeroUnit()
{
    gv_playerData.heroUnit = UnitGroupUnit(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 10), 1);
}

void Player_KillReward(int player, point deadUnitPosition)
{
    PlayerModifyPropertyFixed(player, c_playerPropMinerals, c_playerPropOperAdd, 10);
    UI_CreateTextTag(StringToText("+") + FixedToText(10, 2), Color(20, 60, 90), deadUnitPosition, PlayerGroupSingle(player), 1.0, 3.0);
}

bool Player_OnUnitDeath(bool testConds, bool runActions)
{
    if (!UnitIsAlive(gv_playerData.heroUnit))
    {
        GameOver(1, c_gameOverDefeat, true, true);
    }

    if (libNtve_gf_KillingPlayer() >= 1 && libNtve_gf_KillingPlayer() <= 6 && EventPlayer() == 15)
    {
        Player_KillReward(libNtve_gf_KillingPlayer(), UnitGetPosition(EventUnit()));
    }

    return true;
}

bool Player_OnAbilityUsed(bool testConds, bool runActions)
{
    abilcmd abilityUsed;
    int triggeringPlayer;

    triggeringPlayer = EventPlayer();

    if (triggeringPlayer < 1 || triggeringPlayer > 6)
    {
        return true;
    }

    abilityUsed = EventUnitAbility();

    Debug_ShowMessage("Ability utilis√© : " + AbilityCommandGetAbility(abilityUsed));

    return true;
}

void Player_Init()
{
    Player_SetHeroUnit();
    TriggerAddEventUnitDied(TriggerCreate("Player_OnUnitDeath"), null);
    TriggerAddEventUnitAbility(TriggerCreate("Player_OnAbilityUsed"), null, null, c_abilEffectStageChannel, false);
    Camera_FocusOnUnit(1, gv_playerData.heroUnit);
}