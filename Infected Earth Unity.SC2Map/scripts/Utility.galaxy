bool Utility_IsNumber (string input) {
    int length = StringLength(input);
    int currentPosition;
    string currentCharacter = "";
    bool hasDecimalPoint;

    if (length == 0) {
        return false;
    }

    currentCharacter = StringSub(input, (currentPosition + 1), (currentPosition + 1));
    if (currentCharacter == "-") {
        if (length == 1) {
            return false;
        }

        currentPosition += 1;
    }

    while (currentPosition < length) {
        currentCharacter = StringSub(input, (currentPosition + 1), (currentPosition + 1));
        if (currentCharacter == ".") {
            if (hasDecimalPoint == false) {
                hasDecimalPoint = true;
            }
            else {
                return false;
            }
        }
        else {
            if (currentCharacter == "0"
                || currentCharacter == "1"
                || currentCharacter == "2"
                || currentCharacter == "3"
                || currentCharacter == "4"
                || currentCharacter == "5"
                || currentCharacter == "6"
                || currentCharacter == "7"
                || currentCharacter == "8"
                || currentCharacter == "9") {
            }
            else {
                return false;
            }
        }
        currentPosition += 1;
    }
    return true;
}

bool Utility_IsInt(fixed input) {
    return Round(input) == input;
}

static int Utility_DelayedTextTagDestroyer_ParamTextTag;
static trigger Utility_DelayedTextTagDestroyer_Trigger;

void Utility_DelayedTextTagCreate(text inText, color inColor, point position, playergroup pg, fixed offset){
    Utility_DelayedTextTagDestroyer_ParamTextTag = TextTagCreate(TextWithColor(inText, inColor), 24, position, offset, true, false, pg);
    TextTagSetVelocity(Utility_DelayedTextTagDestroyer_ParamTextTag, 1.0, 90.0);
    TextTagSetTime(Utility_DelayedTextTagDestroyer_ParamTextTag, c_textTagTimeDuration, 3.0);
    TriggerExecute(Utility_DelayedTextTagDestroyer_Trigger, false, false);
}
bool Utility_DelayedTextTagDestroyer(bool testCond, bool runActions){
    int textTag = Utility_DelayedTextTagDestroyer_ParamTextTag;
    Wait(3.5, c_timeGame);
    TextTagDestroy(textTag);

    return true;
}

void Utility_Init()
{
    Utility_DelayedTextTagDestroyer_Trigger = TriggerCreate("Utility_DelayedTextTagDestroyer");
}