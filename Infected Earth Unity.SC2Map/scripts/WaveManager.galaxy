// Déclarations globales
int g_currentWave;          // Numéro de la vague actuelle (commence à 0)
int g_unitsAlive;           // Nombre d'unités vivantes dans la vague actuelle
unitgroup g_waveGroup;      // Groupe d'unités de la vague actuelle
point g_spawnPoint;         // Point de spawn des ennemis (ajuste les coords)
point g_attackPoint;        // Point d'attaque vers la base du joueur (ajuste les coords)

// Condition pour spawn la prochaine vague : pas d'unités vivantes et moins de 10 vagues
bool Wave_SpawnCondition() {
    return (g_unitsAlive == 0 && g_currentWave < 10);
}

// Action appelée à chaque mort d'unité (décompte et vérifie fin de vague)
bool Wave_OnUnitDeath_Action(bool testConds, bool runActions) {
    if (g_unitsAlive > 0) {
        g_unitsAlive -= 1;
    }
    
    // Si fin de vague
    if (g_unitsAlive == 0 && g_currentWave > 0) {
        if (g_currentWave == 10) {
            // Victoire pour le Joueur 1 !
            GameOver(1, 0, true, true);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Victoire ! Toutes les vagues sont vaincues !"));
        } else {
            // Message pour la prochaine vague
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Vague terminée ! Préparez-vous pour la suivante..."));
        }
    }

    return true;
}

// Action pour spawn une vague
bool Wave_SpawnAction(bool testConds, bool runActions) {
    int numUnits;
    int i;
    unit newUnit;
    unit playerUnit;
    unitgroup playerUnitGroup;

    if (g_currentWave >= 10) 
    {
        return false;
    }
    
    if (!Wave_SpawnCondition())
    {
        return false;
    }

    g_currentWave += 1;
    numUnits = 5; // Exemple : 5 unités par niveau de vague (augmente la difficulté)
    UnitGroupClear(g_waveGroup);

    for (i = 0; i < numUnits; i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 1, 15, g_spawnPoint);
        newUnit = UnitLastCreated();
        UnitGroupAdd(g_waveGroup, newUnit);
    }
    
    g_unitsAlive = numUnits;

    playerUnitGroup = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 10);
    playerUnit = UnitGroupUnit(playerUnitGroup, 1);

    // Faire attaquer le groupe
    UnitGroupIssueOrder(g_waveGroup, OrderTargetingUnit(AbilityCommand("attack", 0), playerUnit), c_orderQueueReplace);
    
    // Message optionnel pour le joueur
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Vague " + IntToString(g_currentWave) + " !"));

    return true;
}

// Fonction d'initialisation des vagues (à appeler dans Map_Init)
void Wave_Init() {
    trigger spawnTrigger;
    trigger deathTrigger;
    g_currentWave = 0;
    g_unitsAlive = 0;
    g_waveGroup = UnitGroupEmpty();
    g_spawnPoint = RegionGetCenter(RegionFromName("EnemySpawnPoint"));
    g_attackPoint = RegionGetCenter(RegionFromName("EnemySpawnPoint"));
    
    // Créer le trigger pour vérifier et spawn la prochaine vague (toutes les 1 seconde)
    spawnTrigger = TriggerCreate("Wave_SpawnAction");
    TriggerAddEventTimePeriodic(spawnTrigger, 1, 1);
    TriggerEnable(spawnTrigger, true);
    
    // Créer le trigger pour la mort d'unités (tous les Zerglings, tous les joueurs ennemis)
    deathTrigger = TriggerCreate("Wave_OnUnitDeath_Action");
    TriggerAddEventUnitDied(deathTrigger, null);
    TriggerEnable(deathTrigger, true);
}